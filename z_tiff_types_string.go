// Copyright 2014 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Auto generated by gen_helper.go, DO NOT EDIT!!!

package tiff

import (
	"fmt"
)

var _TiffTypeTable = map[TiffType]string{
	TiffType_ClassicTIFF: `TiffType_ClassicTIFF`,
	TiffType_BigTIFF:     `TiffType_BigTIFF`,
}

func (p TiffType) String() string {
	if name, ok := _TiffTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TiffType_Unknown(%d)", uint16(p))
}

var _ImageTypeTable = map[ImageType]string{
	ImageType_Nil:        `ImageType_Nil`,
	ImageType_Bilevel:    `ImageType_Bilevel`,
	ImageType_Paletted:   `ImageType_Paletted`,
	ImageType_Gray:       `ImageType_Gray`,
	ImageType_GrayInvert: `ImageType_GrayInvert`,
	ImageType_RGB:        `ImageType_RGB`,
	ImageType_RGBA:       `ImageType_RGBA`,
	ImageType_NRGBA:      `ImageType_NRGBA`,
}

func (p ImageType) String() string {
	if name, ok := _ImageTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("ImageType_Unknown(%d)", uint16(p))
}

var _CompressTypeTable = map[CompressType]string{
	CompressType_Nil:        `CompressType_Nil`,
	CompressType_None:       `CompressType_None`,
	CompressType_CCITT:      `CompressType_CCITT`,
	CompressType_G3:         `CompressType_G3`,
	CompressType_G4:         `CompressType_G4`,
	CompressType_LZW:        `CompressType_LZW`,
	CompressType_JPEGOld:    `CompressType_JPEGOld`,
	CompressType_JPEG:       `CompressType_JPEG`,
	CompressType_Deflate:    `CompressType_Deflate`,
	CompressType_PackBits:   `CompressType_PackBits`,
	CompressType_DeflateOld: `CompressType_DeflateOld`,
}

func (p CompressType) String() string {
	if name, ok := _CompressTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("CompressType_Unknown(%d)", uint16(p))
}

var _DataTypeTable = map[DataType]string{
	DataType_Nil:       `DataType_Nil`,
	DataType_Byte:      `DataType_Byte`,
	DataType_ASCII:     `DataType_ASCII`,
	DataType_Short:     `DataType_Short`,
	DataType_Long:      `DataType_Long`,
	DataType_Rational:  `DataType_Rational`,
	DataType_SByte:     `DataType_SByte`,
	DataType_Undefined: `DataType_Undefined`,
	DataType_SShort:    `DataType_SShort`,
	DataType_SLong:     `DataType_SLong`,
	DataType_SRational: `DataType_SRational`,
	DataType_Float:     `DataType_Float`,
	DataType_Double:    `DataType_Double`,
	DataType_IFD:       `DataType_IFD`,
	DataType_Unicode:   `DataType_Unicode`,
	DataType_Complex:   `DataType_Complex`,
	DataType_Long8:     `DataType_Long8`,
	DataType_SLong8:    `DataType_SLong8`,
	DataType_IFD8:      `DataType_IFD8`,
}

func (p DataType) String() string {
	if name, ok := _DataTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("DataType_Unknown(%d)", uint16(p))
}

var _TagTypeTable = map[TagType]string{
	TagType_NewSubfileType:             `TagType_NewSubfileType`,
	TagType_SubfileType:                `TagType_SubfileType`,
	TagType_ImageWidth:                 `TagType_ImageWidth`,
	TagType_ImageLength:                `TagType_ImageLength`,
	TagType_BitsPerSample:              `TagType_BitsPerSample`,
	TagType_Compression:                `TagType_Compression`,
	TagType_PhotometricInterpretation:  `TagType_PhotometricInterpretation`,
	TagType_Threshholding:              `TagType_Threshholding`,
	TagType_CellWidth:                  `TagType_CellWidth`,
	TagType_CellLenght:                 `TagType_CellLenght`,
	TagType_FillOrder:                  `TagType_FillOrder`,
	TagType_DocumentName:               `TagType_DocumentName`,
	TagType_ImageDescription:           `TagType_ImageDescription`,
	TagType_Make:                       `TagType_Make`,
	TagType_Model:                      `TagType_Model`,
	TagType_StripOffsets:               `TagType_StripOffsets`,
	TagType_Orientation:                `TagType_Orientation`,
	TagType_SamplesPerPixel:            `TagType_SamplesPerPixel`,
	TagType_RowsPerStrip:               `TagType_RowsPerStrip`,
	TagType_StripByteCounts:            `TagType_StripByteCounts`,
	TagType_MinSampleValue:             `TagType_MinSampleValue`,
	TagType_MaxSampleValue:             `TagType_MaxSampleValue`,
	TagType_XResolution:                `TagType_XResolution`,
	TagType_YResolution:                `TagType_YResolution`,
	TagType_PlanarConfiguration:        `TagType_PlanarConfiguration`,
	TagType_PageName:                   `TagType_PageName`,
	TagType_XPosition:                  `TagType_XPosition`,
	TagType_YPosition:                  `TagType_YPosition`,
	TagType_FreeOffsets:                `TagType_FreeOffsets`,
	TagType_FreeByteCounts:             `TagType_FreeByteCounts`,
	TagType_GrayResponseUnit:           `TagType_GrayResponseUnit`,
	TagType_GrayResponseCurve:          `TagType_GrayResponseCurve`,
	TagType_T4Options:                  `TagType_T4Options`,
	TagType_T6Options:                  `TagType_T6Options`,
	TagType_ResolutionUnit:             `TagType_ResolutionUnit`,
	TagType_PageNumber:                 `TagType_PageNumber`,
	TagType_TransferFunction:           `TagType_TransferFunction`,
	TagType_Software:                   `TagType_Software`,
	TagType_DateTime:                   `TagType_DateTime`,
	TagType_Artist:                     `TagType_Artist`,
	TagType_HostComputer:               `TagType_HostComputer`,
	TagType_Predictor:                  `TagType_Predictor`,
	TagType_WhitePoint:                 `TagType_WhitePoint`,
	TagType_PrimaryChromaticities:      `TagType_PrimaryChromaticities`,
	TagType_ColorMap:                   `TagType_ColorMap`,
	TagType_HalftoneHints:              `TagType_HalftoneHints`,
	TagType_TileWidth:                  `TagType_TileWidth`,
	TagType_TileLength:                 `TagType_TileLength`,
	TagType_TileOffsets:                `TagType_TileOffsets`,
	TagType_TileByteCounts:             `TagType_TileByteCounts`,
	TagType_InkSet:                     `TagType_InkSet`,
	TagType_InkNames:                   `TagType_InkNames`,
	TagType_NumberOfInks:               `TagType_NumberOfInks`,
	TagType_DotRange:                   `TagType_DotRange`,
	TagType_TargetPrinter:              `TagType_TargetPrinter`,
	TagType_ExtraSamples:               `TagType_ExtraSamples`,
	TagType_SampleFormat:               `TagType_SampleFormat`,
	TagType_SMinSampleValue:            `TagType_SMinSampleValue`,
	TagType_SMaxSampleValue:            `TagType_SMaxSampleValue`,
	TagType_TransferRange:              `TagType_TransferRange`,
	TagType_JPEGProc:                   `TagType_JPEGProc`,
	TagType_JPEGInterchangeFormat:      `TagType_JPEGInterchangeFormat`,
	TagType_JPEGInterchangeFormatLngth: `TagType_JPEGInterchangeFormatLngth`,
	TagType_JPEGRestartInterval:        `TagType_JPEGRestartInterval`,
	TagType_JPEGLosslessPredictors:     `TagType_JPEGLosslessPredictors`,
	TagType_JPEGPointTransforms:        `TagType_JPEGPointTransforms`,
	TagType_JPEGQTables:                `TagType_JPEGQTables`,
	TagType_JPEGDCTables:               `TagType_JPEGDCTables`,
	TagType_JPEGACTables:               `TagType_JPEGACTables`,
	TagType_YCbCrCoefficients:          `TagType_YCbCrCoefficients`,
	TagType_YCbCrSubSampling:           `TagType_YCbCrSubSampling`,
	TagType_YCbCrPositioning:           `TagType_YCbCrPositioning`,
	TagType_ReferenceBlackWhite:        `TagType_ReferenceBlackWhite`,
	TagType_Copyright:                  `TagType_Copyright`,
	TagType_GeoKeyDirectoryTag:         `TagType_GeoKeyDirectoryTag`,
	TagType_GeoDoubleParamsTag:         `TagType_GeoDoubleParamsTag`,
	TagType_GeoAsciiParamsTag:          `TagType_GeoAsciiParamsTag`,
	TagType_ModelTiepointTag:           `TagType_ModelTiepointTag`,
	TagType_ModelPixelScaleTag:         `TagType_ModelPixelScaleTag`,
	TagType_ModelTransformationTag:     `TagType_ModelTransformationTag`,
	TagType_IntergraphMatrixTag:        `TagType_IntergraphMatrixTag`,
}

func (p TagType) String() string {
	if name, ok := _TagTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagType_Unknown(%d)", uint16(p))
}

var _TagValue_PhotometricTypeTable = map[TagValue_PhotometricType]string{
	TagValue_PhotometricType_WhiteIsZero: `TagValue_PhotometricType_WhiteIsZero`,
	TagValue_PhotometricType_BlackIsZero: `TagValue_PhotometricType_BlackIsZero`,
	TagValue_PhotometricType_RGB:         `TagValue_PhotometricType_RGB`,
	TagValue_PhotometricType_Paletted:    `TagValue_PhotometricType_Paletted`,
	TagValue_PhotometricType_TransMask:   `TagValue_PhotometricType_TransMask`,
	TagValue_PhotometricType_CMYK:        `TagValue_PhotometricType_CMYK`,
	TagValue_PhotometricType_YCbCr:       `TagValue_PhotometricType_YCbCr`,
	TagValue_PhotometricType_CIELab:      `TagValue_PhotometricType_CIELab`,
}

func (p TagValue_PhotometricType) String() string {
	if name, ok := _TagValue_PhotometricTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagValue_PhotometricType_Unknown(%d)", uint16(p))
}

var _TagValue_PredictorTypeTable = map[TagValue_PredictorType]string{
	TagValue_PredictorType_None:       `TagValue_PredictorType_None`,
	TagValue_PredictorType_Horizontal: `TagValue_PredictorType_Horizontal`,
}

func (p TagValue_PredictorType) String() string {
	if name, ok := _TagValue_PredictorTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagValue_PredictorType_Unknown(%d)", uint16(p))
}

var _TagValue_ResolutionUnitTypeTable = map[TagValue_ResolutionUnitType]string{
	TagValue_ResolutionUnitType_None:    `TagValue_ResolutionUnitType_None`,
	TagValue_ResolutionUnitType_PerInch: `TagValue_ResolutionUnitType_PerInch`,
	TagValue_ResolutionUnitType_PerCM:   `TagValue_ResolutionUnitType_PerCM`,
}

func (p TagValue_ResolutionUnitType) String() string {
	if name, ok := _TagValue_ResolutionUnitTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagValue_ResolutionUnitType_Unknown(%d)", uint16(p))
}
