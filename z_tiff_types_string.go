// Copyright 2014 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Auto generated by gen_helper.go, DO NOT EDIT!!!

package tiff

import (
	"fmt"
	"time"
)

var _TiffTypeTable = map[TiffType]string{
	TiffType_ClassicTIFF: `TiffType_ClassicTIFF`,
	TiffType_BigTIFF:     `TiffType_BigTIFF`,
}

func (p TiffType) String() string {
	if name, ok := _TiffTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TiffType_Unknown(%d)", uint16(p))
}

var _ImageTypeTable = map[ImageType]string{
	ImageType_Nil:           `ImageType_Nil`,
	ImageType_Bilevel:       `ImageType_Bilevel`,
	ImageType_BilevelInvert: `ImageType_BilevelInvert`,
	ImageType_Paletted:      `ImageType_Paletted`,
	ImageType_Gray:          `ImageType_Gray`,
	ImageType_GrayInvert:    `ImageType_GrayInvert`,
	ImageType_RGB:           `ImageType_RGB`,
	ImageType_RGBA:          `ImageType_RGBA`,
	ImageType_NRGBA:         `ImageType_NRGBA`,
}

func (p ImageType) String() string {
	if name, ok := _ImageTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("ImageType_Unknown(%d)", uint16(p))
}

var _CompressTypeTable = map[CompressType]string{
	CompressType_Nil:        `CompressType_Nil`,        //
	CompressType_None:       `CompressType_None`,       //
	CompressType_CCITT:      `CompressType_CCITT`,      //
	CompressType_G3:         `CompressType_G3`,         // Group 3 Fax.
	CompressType_G4:         `CompressType_G4`,         // Group 4 Fax.
	CompressType_LZW:        `CompressType_LZW`,        //
	CompressType_JPEGOld:    `CompressType_JPEGOld`,    // Superseded by cJPEG.
	CompressType_JPEG:       `CompressType_JPEG`,       //
	CompressType_Deflate:    `CompressType_Deflate`,    // zlib compression.
	CompressType_PackBits:   `CompressType_PackBits`,   //
	CompressType_DeflateOld: `CompressType_DeflateOld`, // Superseded by cDeflate.
}

func (p CompressType) String() string {
	if name, ok := _CompressTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("CompressType_Unknown(%d)", uint16(p))
}

var _DataTypeTable = map[DataType]string{
	DataType_Nil:       `DataType_Nil`,       //  0, invalid
	DataType_Byte:      `DataType_Byte`,      //  1
	DataType_ASCII:     `DataType_ASCII`,     //  2
	DataType_Short:     `DataType_Short`,     //  3
	DataType_Long:      `DataType_Long`,      //  4
	DataType_Rational:  `DataType_Rational`,  //  5
	DataType_SByte:     `DataType_SByte`,     //  6
	DataType_Undefined: `DataType_Undefined`, //  7
	DataType_SShort:    `DataType_SShort`,    //  8
	DataType_SLong:     `DataType_SLong`,     //  9
	DataType_SRational: `DataType_SRational`, // 10
	DataType_Float:     `DataType_Float`,     // 11
	DataType_Double:    `DataType_Double`,    // 12
	DataType_IFD:       `DataType_IFD`,       // 13
	DataType_Unicode:   `DataType_Unicode`,   // 14
	DataType_Complex:   `DataType_Complex`,   // 15
	DataType_Long8:     `DataType_Long8`,     // 16
	DataType_SLong8:    `DataType_SLong8`,    // 17
	DataType_IFD8:      `DataType_IFD8`,      // 18
}

func (p DataType) String() string {
	if name, ok := _DataTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("DataType_Unknown(%d)", uint16(p))
}

var _TagTypeTable = map[TagType]string{
	TagType_NewSubfileType:             `TagType_NewSubfileType`,             // LONG , 1, # Default=0
	TagType_SubfileType:                `TagType_SubfileType`,                // SHORT, 1,
	TagType_ImageWidth:                 `TagType_ImageWidth`,                 // SHORT/LONG/LONG8, 1, # Required
	TagType_ImageLength:                `TagType_ImageLength`,                // SHORT/LONG/LONG8, 1, # Required
	TagType_BitsPerSample:              `TagType_BitsPerSample`,              // SHORT, *, # Default=1. See SamplesPerPixel
	TagType_Compression:                `TagType_Compression`,                // SHORT, 1, # Default=1
	TagType_PhotometricInterpretation:  `TagType_PhotometricInterpretation`,  // SHORT, 1,
	TagType_Threshholding:              `TagType_Threshholding`,              // SHORT, 1, # Default=1
	TagType_CellWidth:                  `TagType_CellWidth`,                  // SHORT, 1,
	TagType_CellLenght:                 `TagType_CellLenght`,                 // SHORT, 1,
	TagType_FillOrder:                  `TagType_FillOrder`,                  // SHORT, 1, # Default=1
	TagType_DocumentName:               `TagType_DocumentName`,               // ASCII
	TagType_ImageDescription:           `TagType_ImageDescription`,           // ASCII
	TagType_Make:                       `TagType_Make`,                       // ASCII
	TagType_Model:                      `TagType_Model`,                      // ASCII
	TagType_StripOffsets:               `TagType_StripOffsets`,               // SHORT/LONG/LONG8, *, # StripsPerImage
	TagType_Orientation:                `TagType_Orientation`,                // SHORT, 1, # Default=1
	TagType_SamplesPerPixel:            `TagType_SamplesPerPixel`,            // SHORT, 1, # Default=1
	TagType_RowsPerStrip:               `TagType_RowsPerStrip`,               // SHORT/LONG/LONG8, 1,
	TagType_StripByteCounts:            `TagType_StripByteCounts`,            // SHORT/LONG/LONG8, *, # StripsPerImage
	TagType_MinSampleValue:             `TagType_MinSampleValue`,             // SHORT,    *, # Default=0
	TagType_MaxSampleValue:             `TagType_MaxSampleValue`,             // SHORT,    *, # Default=2^BitsPerSample-1
	TagType_XResolution:                `TagType_XResolution`,                // RATIONAL, 1, # Required?
	TagType_YResolution:                `TagType_YResolution`,                // RATIONAL, 1, # Required?
	TagType_PlanarConfiguration:        `TagType_PlanarConfiguration`,        // SHORT,    1, # Defaule=1
	TagType_PageName:                   `TagType_PageName`,                   // ASCII
	TagType_XPosition:                  `TagType_XPosition`,                  // RATIONAL,   1
	TagType_YPosition:                  `TagType_YPosition`,                  // RATIONAL,   1
	TagType_FreeOffsets:                `TagType_FreeOffsets`,                // LONG/LONG8, *
	TagType_FreeByteCounts:             `TagType_FreeByteCounts`,             // LONG/LONG8, *
	TagType_GrayResponseUnit:           `TagType_GrayResponseUnit`,           // SHORT, 1,
	TagType_GrayResponseCurve:          `TagType_GrayResponseCurve`,          // SHORT, *, # 2**BitPerSample
	TagType_T4Options:                  `TagType_T4Options`,                  // LONG,  1, # Default=0
	TagType_T6Options:                  `TagType_T6Options`,                  // LONG,  1, # Default=0
	TagType_ResolutionUnit:             `TagType_ResolutionUnit`,             // SHORT, 1, # Default=2
	TagType_PageNumber:                 `TagType_PageNumber`,                 // SHORT, 2,
	TagType_TransferFunction:           `TagType_TransferFunction`,           // SHORT, *, # {1 or SamplesPerPixel}*2**BitPerSample
	TagType_Software:                   `TagType_Software`,                   // ASCII
	TagType_DateTime:                   `TagType_DateTime`,                   // ASCII, 20, # YYYY:MM:DD HH:MM:SS, include NULL
	TagType_Artist:                     `TagType_Artist`,                     // ASCII
	TagType_HostComputer:               `TagType_HostComputer`,               // ASCII
	TagType_Predictor:                  `TagType_Predictor`,                  // SHORT, 1, # Default=1
	TagType_WhitePoint:                 `TagType_WhitePoint`,                 // RATIONAL, 2
	TagType_PrimaryChromaticities:      `TagType_PrimaryChromaticities`,      // RATIONAL, 6
	TagType_ColorMap:                   `TagType_ColorMap`,                   // SHORT, *, # 3*(2**BitPerSample)
	TagType_HalftoneHints:              `TagType_HalftoneHints`,              // SHORT, 2
	TagType_TileWidth:                  `TagType_TileWidth`,                  // SHORT/LONG, 1
	TagType_TileLength:                 `TagType_TileLength`,                 // SHORT/LONG, 1
	TagType_TileOffsets:                `TagType_TileOffsets`,                // LONG/LONG8, *, # TilesPerImage
	TagType_TileByteCounts:             `TagType_TileByteCounts`,             // SHORT/LONG, *, # TilesPerImage
	TagType_SubIFD:                     `TagType_SubIFD`,                     // LONG,  *
	TagType_InkSet:                     `TagType_InkSet`,                     // SHORT, 1, # Default=1
	TagType_InkNames:                   `TagType_InkNames`,                   // ASCII
	TagType_NumberOfInks:               `TagType_NumberOfInks`,               // SHORT, 1, # Default=4
	TagType_DotRange:                   `TagType_DotRange`,                   // BYTE/SHORT, # Default=[0,2^BitsPerSample-1]
	TagType_TargetPrinter:              `TagType_TargetPrinter`,              // ASCII
	TagType_ExtraSamples:               `TagType_ExtraSamples`,               // BYTE,  1,
	TagType_SampleFormat:               `TagType_SampleFormat`,               // SHORT, *, # SamplesPerPixel. Default=1
	TagType_SMinSampleValue:            `TagType_SMinSampleValue`,            // *,     *, # SamplesPerPixel, try double
	TagType_SMaxSampleValue:            `TagType_SMaxSampleValue`,            // *,     *, # SamplesPerPixel, try double
	TagType_TransferRange:              `TagType_TransferRange`,              // SHORT, 6,
	TagType_JPEGProc:                   `TagType_JPEGProc`,                   // SHORT, 1,
	TagType_JPEGInterchangeFormat:      `TagType_JPEGInterchangeFormat`,      // LONG,  1,
	TagType_JPEGInterchangeFormatLngth: `TagType_JPEGInterchangeFormatLngth`, // LONG,  1,
	TagType_JPEGRestartInterval:        `TagType_JPEGRestartInterval`,        // SHORT, 1,
	TagType_JPEGLosslessPredictors:     `TagType_JPEGLosslessPredictors`,     // SHORT, *, # SamplesPerPixel
	TagType_JPEGPointTransforms:        `TagType_JPEGPointTransforms`,        // SHORT, *, # SamplesPerPixel
	TagType_JPEGQTables:                `TagType_JPEGQTables`,                // LONG,  *, # SamplesPerPixel
	TagType_JPEGDCTables:               `TagType_JPEGDCTables`,               // LONG,  *, # SamplesPerPixel
	TagType_JPEGACTables:               `TagType_JPEGACTables`,               // LONG,  *, # SamplesPerPixel
	TagType_YCbCrCoefficients:          `TagType_YCbCrCoefficients`,          // RATIONAL, 3
	TagType_YCbCrSubSampling:           `TagType_YCbCrSubSampling`,           // SHORT, 2, # Default=[2,2]
	TagType_YCbCrPositioning:           `TagType_YCbCrPositioning`,           // SHORT, 1, # Default=1
	TagType_ReferenceBlackWhite:        `TagType_ReferenceBlackWhite`,        // LONG , *, # 2*SamplesPerPixel
	TagType_Copyright:                  `TagType_Copyright`,                  // ASCII
	TagType_GeoKeyDirectoryTag:         `TagType_GeoKeyDirectoryTag`,         // SHORT, *, # >= 4
	TagType_GeoDoubleParamsTag:         `TagType_GeoDoubleParamsTag`,         // DOUBLE
	TagType_GeoAsciiParamsTag:          `TagType_GeoAsciiParamsTag`,          // ASCII
	TagType_ModelTiepointTag:           `TagType_ModelTiepointTag`,           // DOUBLE
	TagType_ModelPixelScaleTag:         `TagType_ModelPixelScaleTag`,         // DOUBLE
	TagType_ModelTransformationTag:     `TagType_ModelTransformationTag`,     // DOUBLE, 16
	TagType_IntergraphMatrixTag:        `TagType_IntergraphMatrixTag`,        // DOUBLE, 17
}

var _TagType_TypesTable = map[TagType][]DataType{
	TagType_NewSubfileType:             []DataType{DataType_Long},
	TagType_SubfileType:                []DataType{DataType_Short},
	TagType_ImageWidth:                 []DataType{DataType_Short, DataType_Long, DataType_Long8},
	TagType_ImageLength:                []DataType{DataType_Short, DataType_Long, DataType_Long8},
	TagType_BitsPerSample:              []DataType{DataType_Short},
	TagType_Compression:                []DataType{DataType_Short},
	TagType_PhotometricInterpretation:  []DataType{DataType_Short},
	TagType_Threshholding:              []DataType{DataType_Short},
	TagType_CellWidth:                  []DataType{DataType_Short},
	TagType_CellLenght:                 []DataType{DataType_Short},
	TagType_FillOrder:                  []DataType{DataType_Short},
	TagType_DocumentName:               []DataType{DataType_ASCII},
	TagType_ImageDescription:           []DataType{DataType_ASCII},
	TagType_Make:                       []DataType{DataType_ASCII},
	TagType_Model:                      []DataType{DataType_ASCII},
	TagType_StripOffsets:               []DataType{DataType_Short, DataType_Long, DataType_Long8},
	TagType_Orientation:                []DataType{DataType_Short},
	TagType_SamplesPerPixel:            []DataType{DataType_Short},
	TagType_RowsPerStrip:               []DataType{DataType_Short, DataType_Long, DataType_Long8},
	TagType_StripByteCounts:            []DataType{DataType_Short, DataType_Long, DataType_Long8},
	TagType_MinSampleValue:             []DataType{DataType_Short},
	TagType_MaxSampleValue:             []DataType{DataType_Short},
	TagType_XResolution:                []DataType{DataType_Rational},
	TagType_YResolution:                []DataType{DataType_Rational},
	TagType_PlanarConfiguration:        []DataType{DataType_Short},
	TagType_PageName:                   []DataType{DataType_ASCII},
	TagType_XPosition:                  []DataType{DataType_Rational},
	TagType_YPosition:                  []DataType{DataType_Rational},
	TagType_FreeOffsets:                []DataType{DataType_Long, DataType_Long8},
	TagType_FreeByteCounts:             []DataType{DataType_Long, DataType_Long8},
	TagType_GrayResponseUnit:           []DataType{DataType_Short},
	TagType_GrayResponseCurve:          []DataType{DataType_Short},
	TagType_T4Options:                  []DataType{DataType_Long},
	TagType_T6Options:                  []DataType{DataType_Long},
	TagType_ResolutionUnit:             []DataType{DataType_Short},
	TagType_PageNumber:                 []DataType{DataType_Short},
	TagType_TransferFunction:           []DataType{DataType_Short},
	TagType_Software:                   []DataType{DataType_ASCII},
	TagType_DateTime:                   []DataType{DataType_ASCII},
	TagType_Artist:                     []DataType{DataType_ASCII},
	TagType_HostComputer:               []DataType{DataType_ASCII},
	TagType_Predictor:                  []DataType{DataType_Short},
	TagType_WhitePoint:                 []DataType{DataType_Rational},
	TagType_PrimaryChromaticities:      []DataType{DataType_Rational},
	TagType_ColorMap:                   []DataType{DataType_Short},
	TagType_HalftoneHints:              []DataType{DataType_Short},
	TagType_TileWidth:                  []DataType{DataType_Short, DataType_Long},
	TagType_TileLength:                 []DataType{DataType_Short, DataType_Long},
	TagType_TileOffsets:                []DataType{DataType_Long, DataType_Long8},
	TagType_TileByteCounts:             []DataType{DataType_Short, DataType_Long},
	TagType_SubIFD:                     []DataType{DataType_Long},
	TagType_InkSet:                     []DataType{DataType_Short},
	TagType_InkNames:                   []DataType{DataType_ASCII},
	TagType_NumberOfInks:               []DataType{DataType_Short},
	TagType_DotRange:                   []DataType{DataType_Byte, DataType_Short},
	TagType_TargetPrinter:              []DataType{DataType_ASCII},
	TagType_ExtraSamples:               []DataType{DataType_Byte},
	TagType_SampleFormat:               []DataType{DataType_Short},
	TagType_TransferRange:              []DataType{DataType_Short},
	TagType_JPEGProc:                   []DataType{DataType_Short},
	TagType_JPEGInterchangeFormat:      []DataType{DataType_Long},
	TagType_JPEGInterchangeFormatLngth: []DataType{DataType_Long},
	TagType_JPEGRestartInterval:        []DataType{DataType_Short},
	TagType_JPEGLosslessPredictors:     []DataType{DataType_Short},
	TagType_JPEGPointTransforms:        []DataType{DataType_Short},
	TagType_JPEGQTables:                []DataType{DataType_Long},
	TagType_JPEGDCTables:               []DataType{DataType_Long},
	TagType_JPEGACTables:               []DataType{DataType_Long},
	TagType_YCbCrCoefficients:          []DataType{DataType_Rational},
	TagType_YCbCrSubSampling:           []DataType{DataType_Short},
	TagType_YCbCrPositioning:           []DataType{DataType_Short},
	TagType_ReferenceBlackWhite:        []DataType{DataType_Long},
	TagType_Copyright:                  []DataType{DataType_ASCII},
	TagType_GeoKeyDirectoryTag:         []DataType{DataType_Short},
	TagType_GeoDoubleParamsTag:         []DataType{DataType_Double},
	TagType_GeoAsciiParamsTag:          []DataType{DataType_ASCII},
	TagType_ModelTiepointTag:           []DataType{DataType_Double},
	TagType_ModelPixelScaleTag:         []DataType{DataType_Double},
	TagType_ModelTransformationTag:     []DataType{DataType_Double},
	TagType_IntergraphMatrixTag:        []DataType{DataType_Double},
}

var _TagType_NumsTable = map[TagType][]int{
	TagType_NewSubfileType:             []int{1},
	TagType_SubfileType:                []int{1},
	TagType_ImageWidth:                 []int{1},
	TagType_ImageLength:                []int{1},
	TagType_Compression:                []int{1},
	TagType_PhotometricInterpretation:  []int{1},
	TagType_Threshholding:              []int{1},
	TagType_CellWidth:                  []int{1},
	TagType_CellLenght:                 []int{1},
	TagType_FillOrder:                  []int{1},
	TagType_Orientation:                []int{1},
	TagType_SamplesPerPixel:            []int{1},
	TagType_RowsPerStrip:               []int{1},
	TagType_XResolution:                []int{1},
	TagType_YResolution:                []int{1},
	TagType_PlanarConfiguration:        []int{1},
	TagType_XPosition:                  []int{1},
	TagType_YPosition:                  []int{1},
	TagType_GrayResponseUnit:           []int{1},
	TagType_T4Options:                  []int{1},
	TagType_T6Options:                  []int{1},
	TagType_ResolutionUnit:             []int{1},
	TagType_PageNumber:                 []int{2},
	TagType_DateTime:                   []int{20},
	TagType_Predictor:                  []int{1},
	TagType_WhitePoint:                 []int{2},
	TagType_PrimaryChromaticities:      []int{6},
	TagType_HalftoneHints:              []int{2},
	TagType_TileWidth:                  []int{1},
	TagType_TileLength:                 []int{1},
	TagType_InkSet:                     []int{1},
	TagType_NumberOfInks:               []int{1},
	TagType_ExtraSamples:               []int{1},
	TagType_TransferRange:              []int{6},
	TagType_JPEGProc:                   []int{1},
	TagType_JPEGInterchangeFormat:      []int{1},
	TagType_JPEGInterchangeFormatLngth: []int{1},
	TagType_JPEGRestartInterval:        []int{1},
	TagType_YCbCrCoefficients:          []int{3},
	TagType_YCbCrSubSampling:           []int{2},
	TagType_YCbCrPositioning:           []int{1},
	TagType_ModelTransformationTag:     []int{16},
	TagType_IntergraphMatrixTag:        []int{17},
}

type TagGetter interface {
	GetNewSubfileType() (value int64, ok bool)
	GetSubfileType() (value int64, ok bool)
	GetImageWidth() (value int64, ok bool)
	GetImageLength() (value int64, ok bool)
	GetBitsPerSample() (value []int64, ok bool)
	GetCompression() (value CompressType, ok bool)
	GetPhotometricInterpretation() (value TagValue_PhotometricType, ok bool)
	GetThreshholding() (value int64, ok bool)
	GetCellWidth() (value int64, ok bool)
	GetCellLenght() (value int64, ok bool)
	GetFillOrder() (value int64, ok bool)
	GetDocumentName() (value string, ok bool)
	GetImageDescription() (value string, ok bool)
	GetMake() (value string, ok bool)
	GetModel() (value string, ok bool)
	GetStripOffsets() (value []int64, ok bool)
	GetOrientation() (value int64, ok bool)
	GetSamplesPerPixel() (value int64, ok bool)
	GetRowsPerStrip() (value int64, ok bool)
	GetStripByteCounts() (value []int64, ok bool)
	GetMinSampleValue() (value []int64, ok bool)
	GetMaxSampleValue() (value []int64, ok bool)
	GetXResolution() (value [2]int64, ok bool)
	GetYResolution() (value [2]int64, ok bool)
	GetPlanarConfiguration() (value int64, ok bool)
	GetPageName() (value string, ok bool)
	GetXPosition() (value [2]int64, ok bool)
	GetYPosition() (value [2]int64, ok bool)
	GetFreeOffsets() (value []int64, ok bool)
	GetFreeByteCounts() (value []int64, ok bool)
	GetGrayResponseUnit() (value int64, ok bool)
	GetGrayResponseCurve() (value []int64, ok bool)
	GetT4Options() (value int64, ok bool)
	GetT6Options() (value int64, ok bool)
	GetResolutionUnit() (value TagValue_ResolutionUnitType, ok bool)
	GetPageNumber() (value []int64, ok bool)
	GetTransferFunction() (value []int64, ok bool)
	GetSoftware() (value string, ok bool)
	GetDateTime() (value time.Time, ok bool)
	GetArtist() (value string, ok bool)
	GetHostComputer() (value string, ok bool)
	GetPredictor() (value TagValue_PredictorType, ok bool)
	GetWhitePoint() (value [][2]int64, ok bool)
	GetPrimaryChromaticities() (value [][2]int64, ok bool)
	GetColorMap() (value [][3]uint16, ok bool)
	GetHalftoneHints() (value []int64, ok bool)
	GetTileWidth() (value int64, ok bool)
	GetTileLength() (value int64, ok bool)
	GetTileOffsets() (value []int64, ok bool)
	GetTileByteCounts() (value []int64, ok bool)
	GetSubIFD() (value []int64, ok bool)
	GetInkSet() (value int64, ok bool)
	GetInkNames() (value string, ok bool)
	GetNumberOfInks() (value int64, ok bool)
	GetDotRange() (value []int64, ok bool)
	GetTargetPrinter() (value string, ok bool)
	GetExtraSamples() (value int64, ok bool)
	GetSampleFormat() (value []int64, ok bool)
	GetSMinSampleValue() (value []float64, ok bool)
	GetSMaxSampleValue() (value []float64, ok bool)
	GetTransferRange() (value []int64, ok bool)
	GetJPEGProc() (value int64, ok bool)
	GetJPEGInterchangeFormat() (value int64, ok bool)
	GetJPEGInterchangeFormatLngth() (value int64, ok bool)
	GetJPEGRestartInterval() (value int64, ok bool)
	GetJPEGLosslessPredictors() (value []int64, ok bool)
	GetJPEGPointTransforms() (value []int64, ok bool)
	GetJPEGQTables() (value []int64, ok bool)
	GetJPEGDCTables() (value []int64, ok bool)
	GetJPEGACTables() (value []int64, ok bool)
	GetYCbCrCoefficients() (value [][2]int64, ok bool)
	GetYCbCrSubSampling() (value []int64, ok bool)
	GetYCbCrPositioning() (value int64, ok bool)
	GetReferenceBlackWhite() (value []int64, ok bool)
	GetCopyright() (value string, ok bool)
	GetGeoKeyDirectoryTag() (value []int64, ok bool)
	GetGeoDoubleParamsTag() (value []float64, ok bool)
	GetGeoAsciiParamsTag() (value string, ok bool)
	GetModelTiepointTag() (value []float64, ok bool)
	GetModelPixelScaleTag() (value []float64, ok bool)
	GetModelTransformationTag() (value []float64, ok bool)
	GetIntergraphMatrixTag() (value []float64, ok bool)

	GetUnknown(tag TagType) (value []byte, ok bool)

	private()
}

type TagSetter interface {
	SetNewSubfileType(value int64) (ok bool)
	SetSubfileType(value int64) (ok bool)
	SetImageWidth(value int64) (ok bool)
	SetImageLength(value int64) (ok bool)
	SetBitsPerSample(value []int64) (ok bool)
	SetCompression(value CompressType) (ok bool)
	SetPhotometricInterpretation(value TagValue_PhotometricType) (ok bool)
	SetThreshholding(value int64) (ok bool)
	SetCellWidth(value int64) (ok bool)
	SetCellLenght(value int64) (ok bool)
	SetFillOrder(value int64) (ok bool)
	SetDocumentName(value string) (ok bool)
	SetImageDescription(value string) (ok bool)
	SetMake(value string) (ok bool)
	SetModel(value string) (ok bool)
	SetStripOffsets(value []int64) (ok bool)
	SetOrientation(value int64) (ok bool)
	SetSamplesPerPixel(value int64) (ok bool)
	SetRowsPerStrip(value int64) (ok bool)
	SetStripByteCounts(value []int64) (ok bool)
	SetMinSampleValue(value []int64) (ok bool)
	SetMaxSampleValue(value []int64) (ok bool)
	SetXResolution(value [2]int64) (ok bool)
	SetYResolution(value [2]int64) (ok bool)
	SetPlanarConfiguration(value int64) (ok bool)
	SetPageName(value string) (ok bool)
	SetXPosition(value [2]int64) (ok bool)
	SetYPosition(value [2]int64) (ok bool)
	SetFreeOffsets(value []int64) (ok bool)
	SetFreeByteCounts(value []int64) (ok bool)
	SetGrayResponseUnit(value int64) (ok bool)
	SetGrayResponseCurve(value []int64) (ok bool)
	SetT4Options(value int64) (ok bool)
	SetT6Options(value int64) (ok bool)
	SetResolutionUnit(value TagValue_ResolutionUnitType) (ok bool)
	SetPageNumber(value []int64) (ok bool)
	SetTransferFunction(value []int64) (ok bool)
	SetSoftware(value string) (ok bool)
	SetDateTime(value time.Time) (ok bool)
	SetArtist(value string) (ok bool)
	SetHostComputer(value string) (ok bool)
	SetPredictor(value TagValue_PredictorType) (ok bool)
	SetWhitePoint(value [][2]int64) (ok bool)
	SetPrimaryChromaticities(value [][2]int64) (ok bool)
	SetColorMap(value [][3]uint16) (ok bool)
	SetHalftoneHints(value []int64) (ok bool)
	SetTileWidth(value int64) (ok bool)
	SetTileLength(value int64) (ok bool)
	SetTileOffsets(value []int64) (ok bool)
	SetTileByteCounts(value []int64) (ok bool)
	SetSubIFD(value []int64) (ok bool)
	SetInkSet(value int64) (ok bool)
	SetInkNames(value string) (ok bool)
	SetNumberOfInks(value int64) (ok bool)
	SetDotRange(value []int64) (ok bool)
	SetTargetPrinter(value string) (ok bool)
	SetExtraSamples(value int64) (ok bool)
	SetSampleFormat(value []int64) (ok bool)
	SetSMinSampleValue(value []float64) (ok bool)
	SetSMaxSampleValue(value []float64) (ok bool)
	SetTransferRange(value []int64) (ok bool)
	SetJPEGProc(value int64) (ok bool)
	SetJPEGInterchangeFormat(value int64) (ok bool)
	SetJPEGInterchangeFormatLngth(value int64) (ok bool)
	SetJPEGRestartInterval(value int64) (ok bool)
	SetJPEGLosslessPredictors(value []int64) (ok bool)
	SetJPEGPointTransforms(value []int64) (ok bool)
	SetJPEGQTables(value []int64) (ok bool)
	SetJPEGDCTables(value []int64) (ok bool)
	SetJPEGACTables(value []int64) (ok bool)
	SetYCbCrCoefficients(value [][2]int64) (ok bool)
	SetYCbCrSubSampling(value []int64) (ok bool)
	SetYCbCrPositioning(value int64) (ok bool)
	SetReferenceBlackWhite(value []int64) (ok bool)
	SetCopyright(value string) (ok bool)
	SetGeoKeyDirectoryTag(value []int64) (ok bool)
	SetGeoDoubleParamsTag(value []float64) (ok bool)
	SetGeoAsciiParamsTag(value string) (ok bool)
	SetModelTiepointTag(value []float64) (ok bool)
	SetModelPixelScaleTag(value []float64) (ok bool)
	SetModelTransformationTag(value []float64) (ok bool)
	SetIntergraphMatrixTag(value []float64) (ok bool)

	SetUnknown(tag TagType, value interface{}) (ok bool)

	private()
}

func (p TagType) String() string {
	if name, ok := _TagTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagType_Unknown(%d)", uint16(p))
}

var _TagValue_PhotometricTypeTable = map[TagValue_PhotometricType]string{
	TagValue_PhotometricType_WhiteIsZero: `TagValue_PhotometricType_WhiteIsZero`,
	TagValue_PhotometricType_BlackIsZero: `TagValue_PhotometricType_BlackIsZero`,
	TagValue_PhotometricType_RGB:         `TagValue_PhotometricType_RGB`,
	TagValue_PhotometricType_Paletted:    `TagValue_PhotometricType_Paletted`,
	TagValue_PhotometricType_TransMask:   `TagValue_PhotometricType_TransMask`, // transparency mask
	TagValue_PhotometricType_CMYK:        `TagValue_PhotometricType_CMYK`,
	TagValue_PhotometricType_YCbCr:       `TagValue_PhotometricType_YCbCr`,
	TagValue_PhotometricType_CIELab:      `TagValue_PhotometricType_CIELab`,
}

func (p TagValue_PhotometricType) String() string {
	if name, ok := _TagValue_PhotometricTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagValue_PhotometricType_Unknown(%d)", uint16(p))
}

var _TagValue_PredictorTypeTable = map[TagValue_PredictorType]string{
	TagValue_PredictorType_None:       `TagValue_PredictorType_None`,
	TagValue_PredictorType_Horizontal: `TagValue_PredictorType_Horizontal`,
}

func (p TagValue_PredictorType) String() string {
	if name, ok := _TagValue_PredictorTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagValue_PredictorType_Unknown(%d)", uint16(p))
}

var _TagValue_ResolutionUnitTypeTable = map[TagValue_ResolutionUnitType]string{
	TagValue_ResolutionUnitType_None:    `TagValue_ResolutionUnitType_None`,
	TagValue_ResolutionUnitType_PerInch: `TagValue_ResolutionUnitType_PerInch`, // Dots per inch.
	TagValue_ResolutionUnitType_PerCM:   `TagValue_ResolutionUnitType_PerCM`,   // Dots per centimeter.
}

func (p TagValue_ResolutionUnitType) String() string {
	if name, ok := _TagValue_ResolutionUnitTypeTable[p]; ok {
		return name
	}
	return fmt.Sprintf("TagValue_ResolutionUnitType_Unknown(%d)", uint16(p))
}
